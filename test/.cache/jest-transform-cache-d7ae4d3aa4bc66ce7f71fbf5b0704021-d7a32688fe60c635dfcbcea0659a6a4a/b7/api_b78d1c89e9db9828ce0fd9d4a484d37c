2ea87e80f4da5f8acd1a22e14832e2f8
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CHAIN_API = exports.CALL_API = undefined;

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash.isfunction');

var _lodash2 = _interopRequireDefault(_lodash);

var _humps = require('humps');

var _config = require('./../config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CALL_API = exports.CALL_API = Symbol('CALL_API');
var CHAIN_API = exports.CHAIN_API = Symbol('CHAIN_API');

function actionWith(action, toMerge) {
  var ret = Object.assign({}, action, toMerge);
  delete ret[CALL_API];
  return ret;
}

function extractParams(callApi) {
  var method = callApi.method,
      attach = callApi.attach,
      type = callApi.type,
      path = callApi.path,
      query = callApi.query,
      body = callApi.body,
      header = callApi.header,
      successType = callApi.successType,
      errorType = callApi.errorType,
      afterSuccess = callApi.afterSuccess,
      afterError = callApi.afterError;

  var url = '';

  if (type === 'internal') {
    url = '' + _config.config.get('API_BASE_URL_INTERNAL') + path;
  } else {
    url = '' + _config.config.get('API_BASE_URL_EXTERNAL') + path;
  }

  return {
    method: method,
    attach: attach,
    url: url,
    query: query,
    body: body,
    header: header,
    successType: successType,
    errorType: errorType,
    afterSuccess: afterSuccess,
    afterError: afterError
  };
}

function createRequestPromise(apiActionCreator, next, getState, dispatch) {
  return function (prevBody) {
    var apiAction = apiActionCreator(prevBody);
    var params = extractParams(apiAction[CALL_API]);
    var header = params.header || { 'api-key-oi': 'user-unlogged' };

    return new _bluebird2.default(function (resolve, reject) {
      _superagent2.default[params.method](params.url).send(params.body).query(params.query).set(header).end(function (err, res) {
        if (err) {
          if (params.errorType) {
            dispatch(actionWith(apiAction, {
              type: params.errorType,
              message: err || res.error || null,
              status: res ? res.status : 'Unknown error.',
              statusCode: res ? res.statusCode : 500,
              statusText: res ? res.statusText : 'Unknown error.'
            }));
          }
          if ((0, _lodash2.default)(params.afterError)) {
            params.afterError({ getState: getState });
          }
          reject(err);
        } else {
          var resBody = (0, _humps.camelizeKeys)(res.body);
          dispatch(actionWith(apiAction, {
            type: params.successType,
            response: resBody,
            status: res.status
          }));
          if ((0, _lodash2.default)(params.afterSuccess)) {
            params.afterSuccess({ getState: getState });
          }
          resolve(resBody);
        }
      });
    });
  };
}

exports.default = function (_ref) {
  var dispatch = _ref.dispatch,
      getState = _ref.getState;
  return function (next) {
    return function (action) {
      if (action[CALL_API]) {
        return dispatch(_defineProperty({}, CHAIN_API, [function () {
          return action;
        }]));
      }
      return new _bluebird2.default(function (resolve, reject) {
        if (!action[CHAIN_API]) {
          return next(action);
        }

        var promiseCreators = action[CHAIN_API].map(function (apiActionCreator) {
          return createRequestPromise(apiActionCreator, next, getState, dispatch);
        });

        var overall = promiseCreators.reduce(function (promise, creator) {
          return promise.then(function (body) {
            return creator(body);
          });
        }, _bluebird2.default.resolve());

        return overall.finally(function () {
          resolve();
        }).catch(function (e) {
          reject(e);
        });
      });
    };
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,