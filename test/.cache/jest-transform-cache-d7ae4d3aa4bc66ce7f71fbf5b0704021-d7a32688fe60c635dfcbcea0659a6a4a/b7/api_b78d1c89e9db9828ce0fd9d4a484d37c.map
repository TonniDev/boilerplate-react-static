{"version":3,"sources":["api.js"],"names":["CALL_API","Symbol","CHAIN_API","actionWith","action","toMerge","ret","Object","assign","extractParams","callApi","method","attach","type","path","query","body","header","successType","errorType","afterSuccess","afterError","url","get","createRequestPromise","apiActionCreator","next","getState","dispatch","prevBody","apiAction","params","resolve","reject","send","set","end","err","res","message","error","status","statusCode","statusText","resBody","response","promiseCreators","map","overall","reduce","promise","creator","then","finally","catch","e"],"mappings":"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","file":"api.js","sourcesContent":["import superAgent from 'superagent';\nimport Promise from 'bluebird';\nimport isFunction from 'lodash.isfunction';\nimport {camelizeKeys} from 'humps';\nimport {config} from './../config';\n\nexport const CALL_API = Symbol('CALL_API');\nexport const CHAIN_API = Symbol('CHAIN_API');\n\nfunction actionWith(action, toMerge) {\n  const ret = Object.assign({}, action, toMerge);\n  delete ret[CALL_API];\n  return ret;\n}\n\nfunction extractParams(callApi) {\n  const {\n    method,\n    attach,\n    type,\n    path,\n    query,\n    body,\n    header,\n    successType,\n    errorType,\n    afterSuccess,\n    afterError\n  } = callApi;\n  let url = '';\n\n  if (type === 'internal') {\n    url = `${config.get('API_BASE_URL_INTERNAL')}${path}`;\n  } else {\n    url = `${config.get('API_BASE_URL_EXTERNAL')}${path}`;\n  }\n\n  return {\n    method,\n    attach,\n    url,\n    query,\n    body,\n    header,\n    successType,\n    errorType,\n    afterSuccess,\n    afterError\n  };\n}\n\nfunction createRequestPromise(apiActionCreator, next, getState, dispatch) {\n  return (prevBody) => {\n    const apiAction = apiActionCreator(prevBody);\n    const params = extractParams(apiAction[CALL_API]);\n    const header = params.header || {'api-key-oi': 'user-unlogged'};\n\n    return new Promise((resolve, reject) => {\n      superAgent[params.method](params.url)\n        .send(params.body)\n        .query(params.query)\n        .set(header)\n        .end((err, res) => {\n          if (err) {\n            if (params.errorType) {\n              dispatch(actionWith(apiAction, {\n                type: params.errorType,\n                message: err || res.error || null,\n                status: res ? res.status : 'Unknown error.',\n                statusCode: res ? res.statusCode : 500,\n                statusText: res ? res.statusText : 'Unknown error.'\n              }));\n            }\n            if (isFunction(params.afterError)) {\n              params.afterError({getState});\n            }\n            reject(err);\n          } else {\n            const resBody = camelizeKeys(res.body);\n            dispatch(actionWith(apiAction, {\n              type: params.successType,\n              response: resBody,\n              status: res.status\n            }));\n            if (isFunction(params.afterSuccess)) {\n              params.afterSuccess({getState});\n            }\n            resolve(resBody);\n          }\n        });\n    });\n  };\n}\n\nexport default ({dispatch, getState}) => next => (action) => {\n  if (action[CALL_API]) {\n    return dispatch({\n      [CHAIN_API]: [\n        () => action\n      ]\n    });\n  }\n  return new Promise((resolve, reject) => {\n    if (!action[CHAIN_API]) {\n      return next(action);\n    }\n\n    const promiseCreators = action[CHAIN_API].map((apiActionCreator) => {\n      return createRequestPromise(apiActionCreator, next, getState, dispatch);\n    });\n\n    const overall = promiseCreators.reduce((promise, creator) => {\n      return promise.then((body) => {\n        return creator(body);\n      });\n    }, Promise.resolve());\n\n    return overall.finally(() => {\n      resolve();\n    })\n      .catch((e) => {\n        reject(e);\n      });\n  });\n};\n"]}