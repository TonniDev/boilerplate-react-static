88a03b18c3566ddf03fc6fb25642372b
'use strict';

var path = require('path');
var fs = require('fs');

// Make sure any symlinks in the project folder are resolved:
// https://github.com/facebookincubator/create-react-app/issues/637
var appDirectory = fs.realpathSync(process.cwd());
function resolveApp(relativePath) {
  return path.resolve(appDirectory, relativePath);
}

// We support resolving modules according to `NODE_PATH`.
// This lets you use absolute paths in imports inside large monorepos:
// https://github.com/facebookincubator/create-react-app/issues/253.

// It works similar to `NODE_PATH` in Node itself:
// https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders

// We will export `nodePaths` as an array of absolute paths.
// It will then be used by Webpack configs.
// Jest doesnâ€™t need this because it already handles `NODE_PATH` out of the box.

var nodePaths = (process.env.NODE_PATH || '').split(process.platform === 'win32' ? ';' : ':').filter(Boolean).map(resolveApp);

// config after eject: we're in ./config/
module.exports = {
  appBuild: resolveApp('build'),
  appPublic: resolveApp('public'),
  appHtml: resolveApp('public/index.html'),
  appIndexJs: resolveApp('src/index.js'),
  appPackageJson: resolveApp('package.json'),
  appSrc: resolveApp('src'),
  testsSetup: resolveApp('src/setupTests.js'),
  appNodeModules: resolveApp('node_modules'),
  ownNodeModules: resolveApp('node_modules'),
  nodePaths: nodePaths
};

// config before publish: we're in ./packages/react-scripts/config/
if (__dirname.indexOf(path.join('packages', 'react-scripts', 'config')) !== -1) {
  module.exports = {
    appBuild: resolveOwn('../../../build'),
    appPublic: resolveOwn('../template/public'),
    appHtml: resolveOwn('../template/public/index.html'),
    appIndexJs: resolveOwn('../template/src/index.js'),
    appPackageJson: resolveOwn('../package.json'),
    appSrc: resolveOwn('../template/src'),
    testsSetup: resolveOwn('../template/src/setupTests.js'),
    appNodeModules: resolveOwn('../node_modules'),
    ownNodeModules: resolveOwn('../node_modules'),
    nodePaths: nodePaths
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhdGhzLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiZnMiLCJhcHBEaXJlY3RvcnkiLCJyZWFscGF0aFN5bmMiLCJwcm9jZXNzIiwiY3dkIiwicmVzb2x2ZUFwcCIsInJlbGF0aXZlUGF0aCIsInJlc29sdmUiLCJub2RlUGF0aHMiLCJlbnYiLCJOT0RFX1BBVEgiLCJzcGxpdCIsInBsYXRmb3JtIiwiZmlsdGVyIiwiQm9vbGVhbiIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHBCdWlsZCIsImFwcFB1YmxpYyIsImFwcEh0bWwiLCJhcHBJbmRleEpzIiwiYXBwUGFja2FnZUpzb24iLCJhcHBTcmMiLCJ0ZXN0c1NldHVwIiwiYXBwTm9kZU1vZHVsZXMiLCJvd25Ob2RlTW9kdWxlcyIsIl9fZGlybmFtZSIsImluZGV4T2YiLCJqb2luIiwicmVzb2x2ZU93biJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjtBQUNBLElBQU1DLEtBQUtELFFBQVEsSUFBUixDQUFYOztBQUVBO0FBQ0E7QUFDQSxJQUFNRSxlQUFlRCxHQUFHRSxZQUFILENBQWdCQyxRQUFRQyxHQUFSLEVBQWhCLENBQXJCO0FBQ0EsU0FBU0MsVUFBVCxDQUFvQkMsWUFBcEIsRUFBa0M7QUFDaEMsU0FBT1IsS0FBS1MsT0FBTCxDQUFhTixZQUFiLEVBQTJCSyxZQUEzQixDQUFQO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLElBQU1FLFlBQVksQ0FBQ0wsUUFBUU0sR0FBUixDQUFZQyxTQUFaLElBQXlCLEVBQTFCLEVBQ2ZDLEtBRGUsQ0FDVFIsUUFBUVMsUUFBUixLQUFxQixPQUFyQixHQUErQixHQUEvQixHQUFxQyxHQUQ1QixFQUVmQyxNQUZlLENBRVJDLE9BRlEsRUFHZkMsR0FIZSxDQUdYVixVQUhXLENBQWxCOztBQUtBO0FBQ0FXLE9BQU9DLE9BQVAsR0FBaUI7QUFDZkMsWUFBVWIsV0FBVyxPQUFYLENBREs7QUFFZmMsYUFBV2QsV0FBVyxRQUFYLENBRkk7QUFHZmUsV0FBU2YsV0FBVyxtQkFBWCxDQUhNO0FBSWZnQixjQUFZaEIsV0FBVyxjQUFYLENBSkc7QUFLZmlCLGtCQUFnQmpCLFdBQVcsY0FBWCxDQUxEO0FBTWZrQixVQUFRbEIsV0FBVyxLQUFYLENBTk87QUFPZm1CLGNBQVluQixXQUFXLG1CQUFYLENBUEc7QUFRZm9CLGtCQUFnQnBCLFdBQVcsY0FBWCxDQVJEO0FBU2ZxQixrQkFBZ0JyQixXQUFXLGNBQVgsQ0FURDtBQVVmRztBQVZlLENBQWpCOztBQWNBO0FBQ0EsSUFBSW1CLFVBQVVDLE9BQVYsQ0FBa0I5QixLQUFLK0IsSUFBTCxDQUFVLFVBQVYsRUFBc0IsZUFBdEIsRUFBdUMsUUFBdkMsQ0FBbEIsTUFBd0UsQ0FBQyxDQUE3RSxFQUFnRjtBQUM5RWIsU0FBT0MsT0FBUCxHQUFpQjtBQUNmQyxjQUFVWSxXQUFXLGdCQUFYLENBREs7QUFFZlgsZUFBV1csV0FBVyxvQkFBWCxDQUZJO0FBR2ZWLGFBQVNVLFdBQVcsK0JBQVgsQ0FITTtBQUlmVCxnQkFBWVMsV0FBVywwQkFBWCxDQUpHO0FBS2ZSLG9CQUFnQlEsV0FBVyxpQkFBWCxDQUxEO0FBTWZQLFlBQVFPLFdBQVcsaUJBQVgsQ0FOTztBQU9mTixnQkFBWU0sV0FBVywrQkFBWCxDQVBHO0FBUWZMLG9CQUFnQkssV0FBVyxpQkFBWCxDQVJEO0FBU2ZKLG9CQUFnQkksV0FBVyxpQkFBWCxDQVREO0FBVWZ0QjtBQVZlLEdBQWpCO0FBWUQiLCJmaWxlIjoicGF0aHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuXG4vLyBNYWtlIHN1cmUgYW55IHN5bWxpbmtzIGluIHRoZSBwcm9qZWN0IGZvbGRlciBhcmUgcmVzb2x2ZWQ6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcC9pc3N1ZXMvNjM3XG5jb25zdCBhcHBEaXJlY3RvcnkgPSBmcy5yZWFscGF0aFN5bmMocHJvY2Vzcy5jd2QoKSk7XG5mdW5jdGlvbiByZXNvbHZlQXBwKHJlbGF0aXZlUGF0aCkge1xuICByZXR1cm4gcGF0aC5yZXNvbHZlKGFwcERpcmVjdG9yeSwgcmVsYXRpdmVQYXRoKTtcbn1cblxuLy8gV2Ugc3VwcG9ydCByZXNvbHZpbmcgbW9kdWxlcyBhY2NvcmRpbmcgdG8gYE5PREVfUEFUSGAuXG4vLyBUaGlzIGxldHMgeW91IHVzZSBhYnNvbHV0ZSBwYXRocyBpbiBpbXBvcnRzIGluc2lkZSBsYXJnZSBtb25vcmVwb3M6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcC9pc3N1ZXMvMjUzLlxuXG4vLyBJdCB3b3JrcyBzaW1pbGFyIHRvIGBOT0RFX1BBVEhgIGluIE5vZGUgaXRzZWxmOlxuLy8gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9tb2R1bGVzLmh0bWwjbW9kdWxlc19sb2FkaW5nX2Zyb21fdGhlX2dsb2JhbF9mb2xkZXJzXG5cbi8vIFdlIHdpbGwgZXhwb3J0IGBub2RlUGF0aHNgIGFzIGFuIGFycmF5IG9mIGFic29sdXRlIHBhdGhzLlxuLy8gSXQgd2lsbCB0aGVuIGJlIHVzZWQgYnkgV2VicGFjayBjb25maWdzLlxuLy8gSmVzdCBkb2VzbuKAmXQgbmVlZCB0aGlzIGJlY2F1c2UgaXQgYWxyZWFkeSBoYW5kbGVzIGBOT0RFX1BBVEhgIG91dCBvZiB0aGUgYm94LlxuXG5jb25zdCBub2RlUGF0aHMgPSAocHJvY2Vzcy5lbnYuTk9ERV9QQVRIIHx8ICcnKVxuICAuc3BsaXQocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJyA/ICc7JyA6ICc6JylcbiAgLmZpbHRlcihCb29sZWFuKVxuICAubWFwKHJlc29sdmVBcHApO1xuXG4vLyBjb25maWcgYWZ0ZXIgZWplY3Q6IHdlJ3JlIGluIC4vY29uZmlnL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFwcEJ1aWxkOiByZXNvbHZlQXBwKCdidWlsZCcpLFxuICBhcHBQdWJsaWM6IHJlc29sdmVBcHAoJ3B1YmxpYycpLFxuICBhcHBIdG1sOiByZXNvbHZlQXBwKCdwdWJsaWMvaW5kZXguaHRtbCcpLFxuICBhcHBJbmRleEpzOiByZXNvbHZlQXBwKCdzcmMvaW5kZXguanMnKSxcbiAgYXBwUGFja2FnZUpzb246IHJlc29sdmVBcHAoJ3BhY2thZ2UuanNvbicpLFxuICBhcHBTcmM6IHJlc29sdmVBcHAoJ3NyYycpLFxuICB0ZXN0c1NldHVwOiByZXNvbHZlQXBwKCdzcmMvc2V0dXBUZXN0cy5qcycpLFxuICBhcHBOb2RlTW9kdWxlczogcmVzb2x2ZUFwcCgnbm9kZV9tb2R1bGVzJyksXG4gIG93bk5vZGVNb2R1bGVzOiByZXNvbHZlQXBwKCdub2RlX21vZHVsZXMnKSxcbiAgbm9kZVBhdGhzXG59O1xuXG5cbi8vIGNvbmZpZyBiZWZvcmUgcHVibGlzaDogd2UncmUgaW4gLi9wYWNrYWdlcy9yZWFjdC1zY3JpcHRzL2NvbmZpZy9cbmlmIChfX2Rpcm5hbWUuaW5kZXhPZihwYXRoLmpvaW4oJ3BhY2thZ2VzJywgJ3JlYWN0LXNjcmlwdHMnLCAnY29uZmlnJykpICE9PSAtMSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBhcHBCdWlsZDogcmVzb2x2ZU93bignLi4vLi4vLi4vYnVpbGQnKSxcbiAgICBhcHBQdWJsaWM6IHJlc29sdmVPd24oJy4uL3RlbXBsYXRlL3B1YmxpYycpLFxuICAgIGFwcEh0bWw6IHJlc29sdmVPd24oJy4uL3RlbXBsYXRlL3B1YmxpYy9pbmRleC5odG1sJyksXG4gICAgYXBwSW5kZXhKczogcmVzb2x2ZU93bignLi4vdGVtcGxhdGUvc3JjL2luZGV4LmpzJyksXG4gICAgYXBwUGFja2FnZUpzb246IHJlc29sdmVPd24oJy4uL3BhY2thZ2UuanNvbicpLFxuICAgIGFwcFNyYzogcmVzb2x2ZU93bignLi4vdGVtcGxhdGUvc3JjJyksXG4gICAgdGVzdHNTZXR1cDogcmVzb2x2ZU93bignLi4vdGVtcGxhdGUvc3JjL3NldHVwVGVzdHMuanMnKSxcbiAgICBhcHBOb2RlTW9kdWxlczogcmVzb2x2ZU93bignLi4vbm9kZV9tb2R1bGVzJyksXG4gICAgb3duTm9kZU1vZHVsZXM6IHJlc29sdmVPd24oJy4uL25vZGVfbW9kdWxlcycpLFxuICAgIG5vZGVQYXRoc1xuICB9O1xufVxuIl19